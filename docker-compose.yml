version: '3.8'

services:
  # RAG API Service
  rag-api:
    build: .
    container_name: rag-api
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=google/gemma-3-4b-it
      - USE_CPU=true
    command: python run_api.py --model-path google/gemma-3-4b-it --cpu --host 0.0.0.0
    restart: unless-stopped
    networks:
      - rag-network

  # MLflow Tracking Server
  mlflow:
    build: .
    container_name: mlflow-server
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/app/mlruns
      - ./mlartifacts:/app/mlartifacts
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlruns/mlflow.db
      - MLFLOW_ARTIFACT_ROOT=/app/mlartifacts
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlruns/mlflow.db --default-artifact-root /app/mlartifacts
    restart: unless-stopped
    networks:
      - rag-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - rag-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - rag-network
    depends_on:
      - prometheus

networks:
  rag-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
